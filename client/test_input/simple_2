



{}
query SelectNode(input: $newPersonInput) {
  selectNode(input: $newPersonInput) {
    id(id:1)
    type(type:alice)
    name
    property(property:sasa)
    relationships {
      movie
      genre
    }
    properties {
      id
      name
      born
    }
  }
}
;
{
    type_of_element:node,
    value_type:void,
    name:movie
}
mutation CreateEntity(i: $i) {
    createEntity(i: $i) {
        id(id: 1)
        type(type: alice)
    }
}
;
{
    type_of_element:node,
    value_type:void,
    name:user
}
mutation CreateEntity(i: $i) {
    createEntity(i: $i) {
        id
    }
};

{}
query SelectNode(input: $newPersonInput) {
  selectNode(input: $newPersonInput) {
    id(id:1)
  }
}
;
{
  type:node,
  subject_id:1,
  subject_type:person,
  child_id:2,
  child_type:job,
  value:some,
  subject_name:alice
}

mutation CreateNode(input: $newPersonInput) {
  # Create a new person
  createNode(input: $newPersonInput) {
    id(id: 2)
    name(name: "sasa")
    type
    parent_id(parent_id: 1)
  }
}
;
query GetComplexData($authorId: ID!, $categoryId: ID!, $postId: ID!) {
  # Get author information by ID
  author(id: $authorId) {
    id(id > 1)
    firstName
    lastName
    age
    profile {
      email
      avatarUrl
    }
    posts {
      id
      title
      content
      category {
        id
        name
      }
      comments {
        id
        text
        author {
          id
          firstName
          lastName
        }
      }
      likes
    }
  }

  # Get category information by ID
  category(id: $categoryId) {
    id
    name
    posts {
      id
      title
      content
      author {
        id
        firstName
        lastName
      }
    }
  }

  # Get specific post and its related data
  post(id: $postId) {
    id
    title
    content
    author {
      id
      firstName
      lastName
    }
    category {
      id
      name
    }
    comments {
      id
      text
      author {
        id
        firstName
        lastName
      }
    }
    likes
  }
}
;
